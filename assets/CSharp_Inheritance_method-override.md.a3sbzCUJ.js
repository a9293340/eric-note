import{_ as i,c as a,o as n,ae as l}from"./chunks/framework.TiKqN8Et.js";const o=JSON.parse('{"title":"C# 中的方法覆寫 (Method Override)","description":"","frontmatter":{},"headers":[],"relativePath":"CSharp/Inheritance/method-override.md","filePath":"CSharp/Inheritance/method-override.md"}'),h={name:"CSharp/Inheritance/method-override.md"};function t(p,s,e,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="c-中的方法覆寫-method-override" tabindex="-1">C# 中的方法覆寫 (Method Override) <a class="header-anchor" href="#c-中的方法覆寫-method-override" aria-label="Permalink to &quot;C# 中的方法覆寫 (Method Override)&quot;">​</a></h1><p>方法覆寫是 C# 繼承中的核心機制，它允許子類擴展父類的方法行為，而不是完全替換它。方法覆寫實現了面向對象編程中的多態性原則，使代碼更靈活、更可擴展。</p><h2 id="方法覆寫的定義" tabindex="-1">方法覆寫的定義 <a class="header-anchor" href="#方法覆寫的定義" aria-label="Permalink to &quot;方法覆寫的定義&quot;">​</a></h2><p>方法覆寫是指子類創建一個與父類方法<strong>完全相同簽名</strong>的方法（相同名稱、相同返回類型、相同參數類型和數量），但提供新的實現，同時<strong>保留</strong>父類方法的執行能力。</p><p>關鍵區別在於：方法覆寫允許子類<strong>擴展</strong>父類方法的行為，而不是完全替換它。</p><h2 id="方法覆寫的語法" tabindex="-1">方法覆寫的語法 <a class="header-anchor" href="#方法覆寫的語法" aria-label="Permalink to &quot;方法覆寫的語法&quot;">​</a></h2><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 父類</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Parent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 virtual 關鍵字標記可被覆寫的方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> virtual</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Parent&#39;s method&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子類</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Parent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 override 關鍵字覆寫父類方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 使用 base 關鍵字調用父類方法</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 添加子類特有的行為</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Child&#39;s additional behavior&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="方法覆寫的關鍵要素" tabindex="-1">方法覆寫的關鍵要素 <a class="header-anchor" href="#方法覆寫的關鍵要素" aria-label="Permalink to &quot;方法覆寫的關鍵要素&quot;">​</a></h2><ol><li><strong>父類方法使用 <code>virtual</code> 關鍵字</strong>：表示該方法可以被子類覆寫，但不是必須的</li><li><strong>子類方法使用 <code>override</code> 關鍵字</strong>：明確表示此方法覆寫了父類的虛方法</li><li><strong>使用 <code>base</code> 關鍵字調用父類方法</strong>：子類方法中通常使用 <code>base.方法名()</code> 來執行父類的原始實現</li></ol><h2 id="方法覆寫與方法隱藏的比較" tabindex="-1">方法覆寫與方法隱藏的比較 <a class="header-anchor" href="#方法覆寫與方法隱藏的比較" aria-label="Permalink to &quot;方法覆寫與方法隱藏的比較&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>方法覆寫 (Override)</th><th>方法隱藏 (Hiding)</th></tr></thead><tbody><tr><td>父類方法標記</td><td>必須使用 <code>virtual</code> 標記</td><td>不需要特殊標記</td></tr><tr><td>子類方法標記</td><td>必須使用 <code>override</code> 標記</td><td>使用 <code>new</code> 關鍵字（可選但推薦）</td></tr><tr><td>執行時行為</td><td>基於對象的實際類型決定</td><td>基於引用類型決定調用哪個方法</td></tr><tr><td>設計意圖</td><td>擴展父類方法的行為</td><td>完全替換父類方法的實現</td></tr><tr><td>父類方法執行</td><td>子類通常使用 <code>base</code> 調用父類方法</td><td>父類方法不會被執行</td></tr><tr><td>多態性支持</td><td>支持多態，無論引用類型如何都執行子類方法</td><td>不支持多態，引用類型決定執行哪個方法</td></tr></tbody></table><h2 id="實際範例" tabindex="-1">實際範例 <a class="header-anchor" href="#實際範例" aria-label="Permalink to &quot;實際範例&quot;">​</a></h2><p>以下是一個完整的方法覆寫示例：</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 父類</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Employee</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 標記為 virtual 表示可以被覆寫</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> virtual</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetHealthInsuranceAmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 所有員工的基礎健康保險金額</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Employee basic health insurance: 500&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用方法覆寫的子類</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Manager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Employee</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 override 覆寫父類方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetHealthInsuranceAmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 調用父類方法獲取基本保險金額</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetHealthInsuranceAmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 添加經理特有的附加保險金額</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Manager additional premium: 1000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 基本保險 + 附加保險</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 沒有覆寫父類方法的子類</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SalesMan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Employee</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 沒有重寫 GetHealthInsuranceAmount 方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 將使用父類的實現</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 創建父類對象</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Employee</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Employee total insurance: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">emp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetHealthInsuranceAmount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 創建 Manager 子類對象</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Manager</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mgr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Manager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Manager total insurance: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mgr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetHealthInsuranceAmount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 創建 SalesMan 子類對象</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SalesMan</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SalesMan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;SalesMan total insurance: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetHealthInsuranceAmount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 使用父類引用指向子類對象 - 多態性</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Employee</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> empRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Manager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Manager as Employee insurance: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">empRef</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetHealthInsuranceAmount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>輸出結果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Employee basic health insurance: 500</span></span>
<span class="line"><span>Employee total insurance: 500</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Employee basic health insurance: 500</span></span>
<span class="line"><span>Manager additional premium: 1000</span></span>
<span class="line"><span>Manager total insurance: 1500</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Employee basic health insurance: 500</span></span>
<span class="line"><span>SalesMan total insurance: 500</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Employee basic health insurance: 500</span></span>
<span class="line"><span>Manager additional premium: 1000</span></span>
<span class="line"><span>Manager as Employee insurance: 1500</span></span></code></pre></div><h2 id="方法覆寫的行為說明" tabindex="-1">方法覆寫的行為說明 <a class="header-anchor" href="#方法覆寫的行為說明" aria-label="Permalink to &quot;方法覆寫的行為說明&quot;">​</a></h2><p>從上面的示例可以看出：</p><ol><li>當使用父類對象 (<code>Employee emp</code>) 調用方法時，執行父類版本的方法</li><li>當使用覆寫了方法的子類對象 (<code>Manager mgr</code>) 調用方法時： <ul><li>首先執行父類方法（通過 <code>base.GetHealthInsuranceAmount()</code>）</li><li>然後執行子類中添加的行為</li></ul></li><li>當使用未覆寫方法的子類對象 (<code>SalesMan sm</code>) 調用方法時，使用父類的實現</li><li><strong>最重要的區別</strong>：當使用父類引用指向子類對象 (<code>Employee empRef = new Manager()</code>) 調用方法時： <ul><li>方法覆寫：執行子類的方法版本（體現多態性）</li><li>方法隱藏：執行父類的方法版本</li></ul></li></ol><h2 id="覆寫虛方法是可選的" tabindex="-1">覆寫虛方法是可選的 <a class="header-anchor" href="#覆寫虛方法是可選的" aria-label="Permalink to &quot;覆寫虛方法是可選的&quot;">​</a></h2><p>父類使用 <code>virtual</code> 標記的方法可以被子類覆寫，但這不是強制性的。子類可以選擇：</p><ol><li>覆寫方法：提供自己的實現</li><li>不覆寫方法：使用父類的實現</li><li>隱藏方法：使用 <code>new</code> 關鍵字提供完全不同的實現</li></ol><h2 id="方法覆寫的使用場景" tabindex="-1">方法覆寫的使用場景 <a class="header-anchor" href="#方法覆寫的使用場景" aria-label="Permalink to &quot;方法覆寫的使用場景&quot;">​</a></h2><p>以下情況適合使用方法覆寫：</p><ol><li><strong>擴展現有行為</strong>：當子類需要保留父類的行為，但添加額外的功能時</li><li><strong>修改部分行為</strong>：當子類需要保留部分父類行為，但修改其他部分時</li><li><strong>需要多態行為</strong>：當設計要求通過父類引用訪問子類對象時執行子類的方法實現</li><li><strong>框架開發</strong>：當開發框架或庫，需要允許用戶通過繼承來自定義行為時</li></ol><h2 id="實際應用案例" tabindex="-1">實際應用案例 <a class="header-anchor" href="#實際應用案例" aria-label="Permalink to &quot;實際應用案例&quot;">​</a></h2><p>方法覆寫在以下場景中特別有用：</p><ol><li><strong>WPF 應用程序</strong>：覆寫控件的默認行為</li><li><strong>ASP.NET MVC</strong>：覆寫控制器基類的方法</li><li><strong>遊戲開發</strong>：覆寫遊戲對象的基本行為</li><li><strong>插件系統</strong>：允許插件通過繼承基類並覆寫其方法來擴展應用程序</li></ol><h2 id="最佳實踐" tabindex="-1">最佳實踐 <a class="header-anchor" href="#最佳實踐" aria-label="Permalink to &quot;最佳實踐&quot;">​</a></h2><ol><li><strong>始終使用 <code>virtual</code> 和 <code>override</code> 關鍵字</strong>：明確標記可覆寫方法和覆寫方法</li><li><strong>在子類中使用 <code>base</code> 調用父類方法</strong>：除非有特殊理由，否則應保留父類的行為</li><li><strong>避免太深的繼承層次</strong>：深層次的繼承會使方法調用變得複雜和難以維護</li><li><strong>注意返回值</strong>：確保覆寫方法的返回值與父類方法兼容</li><li><strong>正確處理參數</strong>：考慮是否需要將所有參數傳遞給父類方法</li></ol><h2 id="總結" tabindex="-1">總結 <a class="header-anchor" href="#總結" aria-label="Permalink to &quot;總結&quot;">​</a></h2><p>方法覆寫是 C# 繼承中實現多態性的重要機制。通過使用 <code>virtual</code>、<code>override</code> 和 <code>base</code> 關鍵字，子類可以擴展父類方法的行為，而不是完全替換它。這允許創建更靈活、更可維護的代碼，特別是在框架開發和大型系統中。</p><p>與方法隱藏不同，方法覆寫支持多態性，使得通過父類引用可以訪問子類的實現，這是面向對象程序設計中的核心概念之一。</p>`,33)]))}const g=i(h,[["render",t]]);export{o as __pageData,g as default};
