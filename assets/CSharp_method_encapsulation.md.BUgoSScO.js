import{_ as a,c as s,o as l,ae as e}from"./chunks/framework.TiKqN8Et.js";const k=JSON.parse('{"title":"封裝的概念","description":"","frontmatter":{},"headers":[],"relativePath":"CSharp/method/encapsulation.md","filePath":"CSharp/method/encapsulation.md"}'),t={name:"CSharp/method/encapsulation.md"};function n(o,i,h,d,r,c){return l(),s("div",null,i[0]||(i[0]=[e(`<h1 id="封裝的概念" tabindex="-1">封裝的概念 <a class="header-anchor" href="#封裝的概念" aria-label="Permalink to &quot;封裝的概念&quot;">​</a></h1><h2 id="什麼是封裝" tabindex="-1">什麼是封裝？ <a class="header-anchor" href="#什麼是封裝" aria-label="Permalink to &quot;什麼是封裝？&quot;">​</a></h2><ul><li><strong>封裝</strong>是一種將數據（稱為字段）和操作這些數據的方法（稱為方法）組合在一起的技術。</li><li>封裝的目的是隱藏內部實現細節，讓外部代碼只能通過方法來訪問和操作數據，而無法直接訪問數據。</li></ul><h2 id="封裝的兩個主要方面" tabindex="-1">封裝的兩個主要方面 <a class="header-anchor" href="#封裝的兩個主要方面" aria-label="Permalink to &quot;封裝的兩個主要方面&quot;">​</a></h2><ul><li><p><strong>數據組合</strong>：</p><ul><li>封裝將數據成員（字段）和操作這些數據的方法放在同一個類中。</li><li>例如，假設有一個類用來描述一個人的信息，這個類可以包含姓名、電子郵件和電話號碼等字段，還可以有方法來設置和獲取這些信息。</li></ul></li><li><p><strong>隱藏實現細節</strong>：</p><ul><li>封裝鼓勵使用私有字段和公共方法，這樣外部代碼只能通過公共方法來訪問私有字段。</li><li>這樣可以保護數據的完整性，確保數據在被使用之前經過驗證或處理。</li></ul></li></ul><h2 id="如何使用方法來操作字段" tabindex="-1">如何使用方法來操作字段 <a class="header-anchor" href="#如何使用方法來操作字段" aria-label="Permalink to &quot;如何使用方法來操作字段&quot;">​</a></h2><ul><li>對於每個字段，可以創建兩種方法： <ul><li><strong>設置方法（set 方法）</strong>：用來將值賦給字段。</li><li><strong>獲取方法（get 方法）</strong>：用來從字段中獲取值。</li></ul></li></ul><h3 id="例子-產品類" tabindex="-1">例子：產品類 <a class="header-anchor" href="#例子-產品類" aria-label="Permalink to &quot;例子：產品類&quot;">​</a></h3><p>假設我們有一個名為 <code>Product</code> 的類，這個類有以下字段：</p><ul><li><code>ProductID</code>：產品的唯一識別碼。</li><li><code>ProductName</code>：產品的名稱。</li><li><code>Cost</code>：產品的成本。</li><li><code>Tax</code>：產品的稅金。</li><li><code>QuantityInStock</code>：庫存數量。</li><li><code>PurchaseDate</code>：購買日期（只讀）。</li></ul><h4 id="設置和獲取方法的實現" tabindex="-1">設置和獲取方法的實現 <a class="header-anchor" href="#設置和獲取方法的實現" aria-label="Permalink to &quot;設置和獲取方法的實現&quot;">​</a></h4><ul><li><p><strong>設置產品 ID 的方法</strong>：</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SetProductID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ProductID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 將傳入的值賦給 ProductID 字段</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p><strong>獲取產品 ID 的方法</strong>：</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetProductID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ProductID; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 ProductID 字段的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><p>對於其他字段（如 <code>ProductName</code>、<code>Cost</code>、<code>Tax</code> 和 <code>QuantityInStock</code>），可以使用相同的方式創建設置和獲取方法。</p></li></ul><h2 id="封裝的好處" tabindex="-1">封裝的好處 <a class="header-anchor" href="#封裝的好處" aria-label="Permalink to &quot;封裝的好處&quot;">​</a></h2><ul><li><strong>數據完整性</strong>：通過方法來操作字段，可以在設置值之前進行驗證，確保數據的正確性。</li><li><strong>代碼可讀性</strong>：使用方法來訪問字段使代碼更易於理解，因為方法名稱通常能夠清楚地表達其功能。</li><li><strong>維護性</strong>：如果需要更改字段的實現方式，只需修改方法的內部實現，而不需要更改外部代碼。</li></ul><h2 id="封裝的隱藏性" tabindex="-1">封裝的隱藏性 <a class="header-anchor" href="#封裝的隱藏性" aria-label="Permalink to &quot;封裝的隱藏性&quot;">​</a></h2><ul><li>在封裝中，某些字段和方法被設置為私有，這意味著它們不能被類的外部代碼直接訪問。</li><li>例如，類似於一個人可能不會透露所有的想法，類中的私有字段和方法也只能通過公共方法來間接訪問。</li><li>這樣的設計確保了數據的安全性和完整性，因為外部代碼無法隨意修改私有字段。</li></ul><h3 id="例子-私有字段的使用" tabindex="-1">例子：私有字段的使用 <a class="header-anchor" href="#例子-私有字段的使用" aria-label="Permalink to &quot;例子：私有字段的使用&quot;">​</a></h3><ul><li>在 <code>Product</code> 類中，將字段設置為私有，並通過公共的 <code>set</code> 和 <code>get</code> 方法來訪問這些字段。</li><li>當外部代碼需要設置或獲取產品的 ID 時，必須使用 <code>SetProductID</code> 和 <code>GetProductID</code> 方法，而不是直接訪問 <code>ProductID</code> 字段。</li></ul><h2 id="在控制台應用程序中的使用" tabindex="-1">在控制台應用程序中的使用 <a class="header-anchor" href="#在控制台應用程序中的使用" aria-label="Permalink to &quot;在控制台應用程序中的使用&quot;">​</a></h2><ul><li><p>在控制台應用程序中，應使用設置和獲取方法來操作 <code>Product</code> 類的字段，而不是直接訪問字段。</p></li><li><p>例如，設置產品 ID 時，應使用 <code>SetProductID</code> 方法：</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">product.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetProductID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用方法設置產品 ID</span></span></code></pre></div></li><li><p>獲取產品 ID 時，應使用 <code>GetProductID</code> 方法：</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> product.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetProductID</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用方法獲取產品 ID</span></span></code></pre></div></li></ul><h2 id="總結" tabindex="-1">總結 <a class="header-anchor" href="#總結" aria-label="Permalink to &quot;總結&quot;">​</a></h2><ul><li>封裝是一種將數據和操作這些數據的功能組合在一起的技術，並隱藏內部實現細節。</li><li>使用設置和獲取方法來操作字段是良好的編程習慣，這樣可以提高代碼的可讀性和維護性。</li></ul><h2 id="私有成員的訪問" tabindex="-1">私有成員的訪問 <a class="header-anchor" href="#私有成員的訪問" aria-label="Permalink to &quot;私有成員的訪問&quot;">​</a></h2><ul><li>當一個類有一組字段和方法時，這些字段和方法可以被設置為私有，這樣外部代碼無法直接訪問它們。</li><li>只有公共字段和方法可以被外部代碼訪問，這樣可以保護類的內部狀態。</li><li>私有字段和方法可以在公共方法中被調用，這樣外部代碼可以通過公共方法間接訪問私有成員。</li></ul><h3 id="例子-私有字段的內部訪問" tabindex="-1">例子：私有字段的內部訪問 <a class="header-anchor" href="#例子-私有字段的內部訪問" aria-label="Permalink to &quot;例子：私有字段的內部訪問&quot;">​</a></h3><ul><li><p>在 <code>Product</code> 類中，將所有字段設置為私有，並通過公共的 <code>set</code> 和 <code>get</code> 方法來訪問這些字段。</p></li><li><p>當外部代碼需要設置或獲取產品的名稱時，必須使用 <code>SetProductName</code> 和 <code>GetProductName</code> 方法，而不是直接訪問 <code>ProductName</code> 字段。</p></li><li><p>這樣的設計確保了數據的安全性，因為外部代碼無法隨意修改私有字段，並且可以在公共方法中添加邏輯來驗證或處理數據。</p></li></ul><h2 id="總結-1" tabindex="-1">總結 <a class="header-anchor" href="#總結-1" aria-label="Permalink to &quot;總結&quot;">​</a></h2><ul><li>封裝的強調了私有成員的隱藏性和保護性，這是良好面向對象編程的關鍵特徵。</li><li>通過公共方法來間接訪問私有字段和方法，能夠提高代碼的安全性和可維護性。</li></ul>`,28)]))}const u=a(t,[["render",n]]);export{k as __pageData,u as default};
