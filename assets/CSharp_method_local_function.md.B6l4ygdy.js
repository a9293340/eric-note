import{_ as i,c as a,o as n,ae as h}from"./chunks/framework.TiKqN8Et.js";const g=JSON.parse('{"title":"C# 7 中的局部函數（Local Functions）","description":"","frontmatter":{},"headers":[],"relativePath":"CSharp/method/local_function.md","filePath":"CSharp/method/local_function.md"}'),l={name:"CSharp/method/local_function.md"};function t(k,s,p,e,r,d){return n(),a("div",null,s[0]||(s[0]=[h(`<h1 id="c-7-中的局部函數-local-functions" tabindex="-1">C# 7 中的局部函數（Local Functions） <a class="header-anchor" href="#c-7-中的局部函數-local-functions" aria-label="Permalink to &quot;C# 7 中的局部函數（Local Functions）&quot;">​</a></h1><h2 id="什麼是局部函數" tabindex="-1">什麼是局部函數 <a class="header-anchor" href="#什麼是局部函數" aria-label="Permalink to &quot;什麼是局部函數&quot;">​</a></h2><ul><li>局部函數是定義在方法內部的函數，用於執行一些小的過程。</li><li>它可以被視為方法的一部分，並且只能在同一方法中調用。</li></ul><h2 id="局部函數的特性" tabindex="-1">局部函數的特性 <a class="header-anchor" href="#局部函數的特性" aria-label="Permalink to &quot;局部函數的特性&quot;">​</a></h2><ul><li>可以是 <code>void</code> 或返回任何類型的值。</li><li>可以接收任意數量的參數，這些參數可以是原始類型或非原始類型。</li><li>不能被其他方法調用，並且無法從方法外部訪問。</li></ul><h2 id="使用局部函數的好處" tabindex="-1">使用局部函數的好處 <a class="header-anchor" href="#使用局部函數的好處" aria-label="Permalink to &quot;使用局部函數的好處&quot;">​</a></h2><ul><li>提高代碼的可重用性，因為可以在同一方法中多次調用局部函數。</li><li>簡化方法的邏輯，將小的計算過程封裝在局部函數中。</li></ul><h2 id="例子-計算學生的平均分數" tabindex="-1">例子：計算學生的平均分數 <a class="header-anchor" href="#例子-計算學生的平均分數" aria-label="Permalink to &quot;例子：計算學生的平均分數&quot;">​</a></h2><p>假設有一個名為 <code>Student</code> 的類，並在其中定義一個名為 <code>DisplayMarks</code> 的方法。</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DisplayMarks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> marks1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> marks2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> marks3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Marks 1: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">marks1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}, Marks 2: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">marks2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}, Marks 3: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">marks3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 定義局部函數</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAverageMarks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> average</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (marks1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> marks2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> marks3) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 計算平均分數</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> average; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回平均分數</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 調用局部函數</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> averageMarks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAverageMarks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Average Marks: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">averageMarks</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="主程序" tabindex="-1">主程序 <a class="header-anchor" href="#主程序" aria-label="Permalink to &quot;主程序&quot;">​</a></h2><p>在 <code>Main</code> 方法中，創建 <code>Student</code> 類的對象並調用 <code>DisplayMarks</code> 方法。</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Program</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Student</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DisplayMarks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">71</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 輸出：Marks 1: 80, Marks 2: 45, Marks 3: 71</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                      // 輸出：Average Marks: 65.33333333333333</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="總結" tabindex="-1">總結 <a class="header-anchor" href="#總結" aria-label="Permalink to &quot;總結&quot;">​</a></h2><ul><li>局部函數提供了一種在方法內部封裝小邏輯的方式，並且可以在同一方法中重用。</li><li>在編寫大型方法時，將可重用的邏輯放在局部函數中可以簡化代碼並提高可讀性。</li><li>局部函數的主要優點是其可重用性，特別是在需要多次執行相同邏輯的情況下。</li></ul><h1 id="c-8-中的靜態局部函數-static-local-functions" tabindex="-1">C# 8 中的靜態局部函數（Static Local Functions） <a class="header-anchor" href="#c-8-中的靜態局部函數-static-local-functions" aria-label="Permalink to &quot;C# 8 中的靜態局部函數（Static Local Functions）&quot;">​</a></h1><h2 id="什麼是靜態局部函數" tabindex="-1">什麼是靜態局部函數 <a class="header-anchor" href="#什麼是靜態局部函數" aria-label="Permalink to &quot;什麼是靜態局部函數&quot;">​</a></h2><ul><li>靜態局部函數是將局部函數寫為靜態的能力。</li><li>使用 <code>static</code> 修飾符來定義靜態局部函數。</li></ul><h2 id="靜態局部函數的特性" tabindex="-1">靜態局部函數的特性 <a class="header-anchor" href="#靜態局部函數的特性" aria-label="Permalink to &quot;靜態局部函數的特性&quot;">​</a></h2><ul><li>靜態局部函數不能訪問包含方法的局部變量和參數。</li><li>與普通局部函數不同，靜態局部函數不會意外訪問或修改局部變量和參數的值。</li></ul><h2 id="使用靜態局部函數的好處" tabindex="-1">使用靜態局部函數的好處 <a class="header-anchor" href="#使用靜態局部函數的好處" aria-label="Permalink to &quot;使用靜態局部函數的好處&quot;">​</a></h2><ul><li>避免在局部函數中意外使用局部變量和參數，從而減少錯誤的可能性。</li><li>提高代碼的可讀性和可維護性，特別是在包含多個局部變量和參數的方法中。</li></ul><h2 id="例子-計算學生的平均分數-1" tabindex="-1">例子：計算學生的平均分數 <a class="header-anchor" href="#例子-計算學生的平均分數-1" aria-label="Permalink to &quot;例子：計算學生的平均分數&quot;">​</a></h2><p>假設有一個名為 <code>Student</code> 的類，並在其中定義一個名為 <code>DisplayMarks</code> 的方法。</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DisplayMarks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> marks1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> marks2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> marks3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Marks 1: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">marks1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}, Marks 2: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">marks2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}, Marks 3: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">marks3</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 定義靜態局部函數</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAverageMarks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> m1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> m2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> m3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> average</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (m1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m3) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 計算平均分數</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> average; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回平均分數</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 調用靜態局部函數</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> averageMarks</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAverageMarks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(marks1, marks2, marks3);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Average Marks: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">averageMarks</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="主程序-1" tabindex="-1">主程序 <a class="header-anchor" href="#主程序-1" aria-label="Permalink to &quot;主程序&quot;">​</a></h2><p>在 <code>Main</code> 方法中，創建 <code>Student</code> 類的對象並調用 <code>DisplayMarks</code> 方法。</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Program</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Student</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DisplayMarks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">80</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">71</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 輸出：Marks 1: 80, Marks 2: 45, Marks 3: 71</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                                      // 輸出：Average Marks: 65.33333333333333</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="總結-1" tabindex="-1">總結 <a class="header-anchor" href="#總結-1" aria-label="Permalink to &quot;總結&quot;">​</a></h2><ul><li>靜態局部函數提供了一種限制局部函數訪問參數和局部變量的方式，從而避免意外的值修改。</li><li>在編寫大型方法時，使用靜態局部函數可以提高代碼的可重用性和可讀性。</li><li>靜態局部函數的主要優點是能夠防止意外的參數和局部變量的訪問，特別是在包含多個局部變量和參數的方法中。</li></ul><h1 id="局部函數與靜態局部函數比較表" tabindex="-1">局部函數與靜態局部函數比較表 <a class="header-anchor" href="#局部函數與靜態局部函數比較表" aria-label="Permalink to &quot;局部函數與靜態局部函數比較表&quot;">​</a></h1><table tabindex="0"><thead><tr><th>特性</th><th>局部函數 (Local Functions)</th><th>靜態局部函數 (Static Local Functions)</th></tr></thead><tbody><tr><td>定義方式</td><td>在方法內部定義，無需 <code>static</code> 修飾符</td><td>在方法內部定義，需使用 <code>static</code> 修飾符</td></tr><tr><td>訪問範圍</td><td>可以訪問包含方法的所有局部變量和參數</td><td>不能訪問包含方法的局部變量和參數</td></tr><tr><td>參數傳遞</td><td>可以直接使用包含方法的參數</td><td>需要將參數作為參數傳遞給靜態局部函數</td></tr><tr><td>可重用性</td><td>可以在同一方法內多次調用</td><td>可以在同一方法內多次調用</td></tr><tr><td>調用方式</td><td>只能在定義它的同一方法內調用</td><td>只能在定義它的同一方法內調用</td></tr><tr><td>作用</td><td>用於封裝小邏輯，簡化方法的結構</td><td>用於限制對局部變量和參數的訪問，避免意外修改</td></tr><tr><td>主要優點</td><td>提高代碼的可重用性和可讀性</td><td>減少錯誤的可能性，確保參數和變量不被意外修改</td></tr></tbody></table><h2 id="總結-2" tabindex="-1">總結 <a class="header-anchor" href="#總結-2" aria-label="Permalink to &quot;總結&quot;">​</a></h2><ul><li>局部函數和靜態局部函數都是用來封裝小邏輯的工具，但它們在訪問範圍和使用方式上有顯著的區別。</li><li>根據需求選擇合適的函數類型可以提高代碼的可讀性和可維護性。</li></ul>`,34)]))}const c=i(l,[["render",t]]);export{g as __pageData,c as default};
