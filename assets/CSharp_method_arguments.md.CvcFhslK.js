import{_ as i,c as a,o as l,ae as h}from"./chunks/framework.Cwl8K4e2.js";const c=JSON.parse('{"title":"C# 中的默認參數（Default Arguments）","description":"","frontmatter":{},"headers":[],"relativePath":"CSharp/method/arguments.md","filePath":"CSharp/method/arguments.md"}'),t={name:"CSharp/method/arguments.md"};function e(n,s,k,p,r,d){return l(),a("div",null,s[0]||(s[0]=[h(`<h1 id="c-中的默認參數-default-arguments" tabindex="-1">C# 中的默認參數（Default Arguments） <a class="header-anchor" href="#c-中的默認參數-default-arguments" aria-label="Permalink to &quot;C# 中的默認參數（Default Arguments）&quot;">​</a></h1><h2 id="什麼是默認參數" tabindex="-1">什麼是默認參數 <a class="header-anchor" href="#什麼是默認參數" aria-label="Permalink to &quot;什麼是默認參數&quot;">​</a></h2><ul><li>默認參數是指在方法定義中為參數指定的預設值。</li><li>當調用方法時，如果未提供該參數的值，則會自動使用預設值。</li></ul><h2 id="默認參數的特性" tabindex="-1">默認參數的特性 <a class="header-anchor" href="#默認參數的特性" aria-label="Permalink to &quot;默認參數的特性&quot;">​</a></h2><ul><li><strong>可選性</strong>：當方法調用者不提供參數值時，默認值會自動使用。</li><li><strong>覆蓋性</strong>：如果提供了參數值，則會使用提供的值，忽略默認值。</li></ul><h2 id="使用場景" tabindex="-1">使用場景 <a class="header-anchor" href="#使用場景" aria-label="Permalink to &quot;使用場景&quot;">​</a></h2><ul><li>默認參數可以簡化方法調用，減少必須提供的參數數量。</li><li>適用於需要經常使用相同值的情況，避免重複代碼。</li></ul><h2 id="範例-計算利息" tabindex="-1">範例：計算利息 <a class="header-anchor" href="#範例-計算利息" aria-label="Permalink to &quot;範例：計算利息&quot;">​</a></h2><p>假設在一個銀行項目中，有一個名為 <code>CalculateInterest</code> 的方法，該方法有一個名為 <code>interestRate</code> 的參數，並為其指定默認值。</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalculateInterest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> principal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interestRate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> principal </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interestRate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="說明" tabindex="-1">說明 <a class="header-anchor" href="#說明" aria-label="Permalink to &quot;說明&quot;">​</a></h3><ul><li>在這個例子中，<code>interestRate</code> 的默認值為 10.5%。</li><li>如果調用 <code>CalculateInterest(1000)</code>，則使用默認利率計算利息。</li><li>如果調用 <code>CalculateInterest(1000, 5)</code>, 則使用提供的利率 5%。</li></ul><h2 id="範例-計算稅金" tabindex="-1">範例：計算稅金 <a class="header-anchor" href="#範例-計算稅金" aria-label="Permalink to &quot;範例：計算稅金&quot;">​</a></h2><p>在 <code>MethodsExample</code> 項目中，有一個名為 <code>CalculateTax</code> 的方法，根據產品的成本計算稅金。</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalculateTax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> percentage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (cost </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cost </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 稅率為 10%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cost </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (percentage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用提供的百分比</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="說明-1" tabindex="-1">說明 <a class="header-anchor" href="#說明-1" aria-label="Permalink to &quot;說明&quot;">​</a></h3><ul><li>當成本小於或等於 20000 時，稅金為 10%。</li><li>當成本大於 20000 時，使用提供的 <code>percentage</code> 參數計算稅金。</li><li>如果不提供 <code>percentage</code>，則默認為 10%。</li></ul><h2 id="實際應用" tabindex="-1">實際應用 <a class="header-anchor" href="#實際應用" aria-label="Permalink to &quot;實際應用&quot;">​</a></h2><ul><li>在實際項目中，使用默認參數可以提高代碼的靈活性和可讀性。</li><li>開發者可以根據需求選擇是否提供參數值，從而簡化方法調用。</li></ul><h2 id="結論" tabindex="-1">結論 <a class="header-anchor" href="#結論" aria-label="Permalink to &quot;結論&quot;">​</a></h2><ul><li>默認參數是 C# 4 中引入的一個強大功能，能夠提高代碼的可維護性和可讀性。</li><li>透過合理使用默認參數，可以減少不必要的參數傳遞，讓方法調用更加簡潔。</li></ul><h1 id="c-中的命名參數-named-arguments" tabindex="-1">C# 中的命名參數（Named Arguments） <a class="header-anchor" href="#c-中的命名參數-named-arguments" aria-label="Permalink to &quot;C# 中的命名參數（Named Arguments）&quot;">​</a></h1><h2 id="什麼是命名參數" tabindex="-1">什麼是命名參數 <a class="header-anchor" href="#什麼是命名參數" aria-label="Permalink to &quot;什麼是命名參數&quot;">​</a></h2><ul><li>命名參數是 C# 4 中引入的一個特性，允許在調用方法時根據參數名稱提供值。</li><li>這樣可以提高代碼的可讀性，特別是在方法有多個參數時。</li></ul><h2 id="使用命名參數的好處" tabindex="-1">使用命名參數的好處 <a class="header-anchor" href="#使用命名參數的好處" aria-label="Permalink to &quot;使用命名參數的好處&quot;">​</a></h2><ul><li><strong>提高可讀性</strong>：當方法有多個參數時，使用命名參數可以清楚地表明每個值對應的參數。</li><li><strong>不受順序限制</strong>：提供參數值時不必遵循參數的定義順序。</li></ul><h2 id="使用場景-1" tabindex="-1">使用場景 <a class="header-anchor" href="#使用場景-1" aria-label="Permalink to &quot;使用場景&quot;">​</a></h2><ul><li>當方法有多個參數，特別是當參數類型不同（如原始類型和引用類型）時，命名參數可以減少混淆。</li><li>對於可選參數（具有默認值的參數），命名參數可以使調用更靈活。</li></ul><h2 id="命名參數的使用示例" tabindex="-1">命名參數的使用示例 <a class="header-anchor" href="#命名參數的使用示例" aria-label="Permalink to &quot;命名參數的使用示例&quot;">​</a></h2><p>假設有一個名為 <code>CalculateTax</code> 的方法，具有多個參數：</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalculateTax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> percentage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> category</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;General&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 計算稅金的邏輯</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cost </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (percentage </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="說明-2" tabindex="-1">說明 <a class="header-anchor" href="#說明-2" aria-label="Permalink to &quot;說明&quot;">​</a></h3><ul><li>在調用 <code>CalculateTax</code> 方法時，可以使用命名參數來提高可讀性：</li></ul><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tax1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalculateTax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">20000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">percentage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">9.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tax2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CalculateTax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">category</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Luxury&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cost</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><ul><li>在這個例子中，<code>tax1</code> 和 <code>tax2</code> 的調用清楚地表明了每個參數的意圖，無需擔心參數的順序。</li></ul><h2 id="使用命名參數的規則" tabindex="-1">使用命名參數的規則 <a class="header-anchor" href="#使用命名參數的規則" aria-label="Permalink to &quot;使用命名參數的規則&quot;">​</a></h2><ul><li>如果使用命名參數來傳遞某個參數，則所有後續的參數也必須使用命名參數傳遞。</li><li>例如，如果你使用 <code>x</code> 的命名參數，則 <code>y</code> 也必須使用命名參數：</li></ul><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 正確的用法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SomeMethod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 錯誤的用法，混合使用命名和位置參數</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// double result = SomeMethod(5, y: 10); // 這會導致編譯錯誤</span></span></code></pre></div><h2 id="性能影響" tabindex="-1">性能影響 <a class="header-anchor" href="#性能影響" aria-label="Permalink to &quot;性能影響&quot;">​</a></h2><ul><li>使用命名參數不會影響方法的性能或輸出，因為它僅僅是為了提高代碼的可讀性。</li><li>方法的執行方式與傳遞參數的方式無關。</li></ul><h2 id="結論-1" tabindex="-1">結論 <a class="header-anchor" href="#結論-1" aria-label="Permalink to &quot;結論&quot;">​</a></h2><ul><li>命名參數是一個強大的功能，特別是在處理多個參數時，可以提高代碼的可讀性和可維護性。</li><li>在實際項目中，當方法有多個參數時，使用命名參數是一個良好的編碼習慣。</li></ul>`,42)]))}const g=i(t,[["render",e]]);export{c as __pageData,g as default};
