import{_ as i,c as a,o as n,ae as l}from"./chunks/framework.TiKqN8Et.js";const o=JSON.parse('{"title":"C# 中的遞歸（Recursion）","description":"","frontmatter":{},"headers":[],"relativePath":"CSharp/method/recursion.md","filePath":"CSharp/method/recursion.md"}'),h={name:"CSharp/method/recursion.md"};function t(e,s,k,p,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="c-中的遞歸-recursion" tabindex="-1">C# 中的遞歸（Recursion） <a class="header-anchor" href="#c-中的遞歸-recursion" aria-label="Permalink to &quot;C# 中的遞歸（Recursion）&quot;">​</a></h1><h2 id="什麼是遞歸" tabindex="-1">什麼是遞歸 <a class="header-anchor" href="#什麼是遞歸" aria-label="Permalink to &quot;什麼是遞歸&quot;">​</a></h2><ul><li>當一個方法調用它自己時，稱為“遞歸”。</li><li>每當條件為真時，方法內部會再次調用相同的方法，從而創建新的堆棧來存儲局部變量和參數。</li></ul><h2 id="遞歸的工作原理" tabindex="-1">遞歸的工作原理 <a class="header-anchor" href="#遞歸的工作原理" aria-label="Permalink to &quot;遞歸的工作原理&quot;">​</a></h2><ul><li>每次調用方法時，會創建一個新的堆棧，並存儲當前的局部變量和參數。</li><li>當條件不再滿足時，遞歸過程將停止，並開始返回結果。</li></ul><h2 id="遞歸的應用" tabindex="-1">遞歸的應用 <a class="header-anchor" href="#遞歸的應用" aria-label="Permalink to &quot;遞歸的應用&quot;">​</a></h2><ul><li>遞歸在數學運算中非常有用，例如計算階乘。</li></ul><h3 id="階乘的定義" tabindex="-1">階乘的定義 <a class="header-anchor" href="#階乘的定義" aria-label="Permalink to &quot;階乘的定義&quot;">​</a></h3><ul><li>一個數的階乘是從1到該數的所有整數的乘積。</li><li>例如，5的階乘是 1 * 2 * 3 * 4 * 5 = 120。</li></ul><h2 id="例子-計算階乘" tabindex="-1">例子：計算階乘 <a class="header-anchor" href="#例子-計算階乘" aria-label="Permalink to &quot;例子：計算階乘&quot;">​</a></h2><p>假設有一個名為 <code>RecursionExample</code> 的控制台應用程序，並定義一個名為 <code>factorial</code> 的方法來計算階乘。</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> factorial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0的階乘為1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> factorial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 遞歸調用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="主程序" tabindex="-1">主程序 <a class="header-anchor" href="#主程序" aria-label="Permalink to &quot;主程序&quot;">​</a></h3><p>在 <code>Main</code> 方法中，接收用戶輸入並計算階乘。</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Program</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Enter a number:&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ReadLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(input); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 將字符串轉換為整數</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Example</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> example</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Example</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        double</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fact</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> example.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">factorial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 計算階乘</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Factorial of {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} is {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fact</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="遞歸的過程" tabindex="-1">遞歸的過程 <a class="header-anchor" href="#遞歸的過程" aria-label="Permalink to &quot;遞歸的過程&quot;">​</a></h2><ol><li>當用戶輸入5時，<code>factorial(5)</code> 被調用。</li><li><code>factorial(5)</code> 調用 <code>factorial(4)</code>，依此類推，直到 <code>factorial(0)</code>。</li><li><code>factorial(0)</code> 返回1，然後逐步返回到上層調用，計算最終結果。</li><li>最終，<code>factorial(5)</code> 返回120。</li></ol><h2 id="總結" tabindex="-1">總結 <a class="header-anchor" href="#總結" aria-label="Permalink to &quot;總結&quot;">​</a></h2><ul><li>遞歸是一種強大的編程技術，特別適用於解決數學問題。</li><li>在實際項目中，遞歸的使用相對較少，主要用於解決特定的數學計算問題。</li><li>使用遞歸時，必須確保有適當的基礎情況來終止遞歸過程，以避免無限循環。</li></ul>`,19)]))}const c=i(h,[["render",t]]);export{o as __pageData,c as default};
