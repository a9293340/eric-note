import{_ as i,c as s,o as a,ae as o}from"./chunks/framework.TiKqN8Et.js";const k=JSON.parse('{"title":"轉換方法 (Conversion Methods)","description":"","frontmatter":{},"headers":[],"relativePath":"CSharp/type-conversion/conversionMethods.md","filePath":"CSharp/type-conversion/conversionMethods.md"}'),t={name:"CSharp/type-conversion/conversionMethods.md"};function l(n,e,d,h,c,r){return a(),s("div",null,e[0]||(e[0]=[o(`<h1 id="轉換方法-conversion-methods" tabindex="-1">轉換方法 (Conversion Methods) <a class="header-anchor" href="#轉換方法-conversion-methods" aria-label="Permalink to &quot;轉換方法 (Conversion Methods)&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>轉換方法是 C# 中預定義的方法，用於將值從一種類型轉換為另一種類型。這包括從任何原始類型到任何其他原始類型的轉換，也可以是原始類型到字符串類型或字符串類型到原始類型的轉換。</p><h3 id="system-convert-類" tabindex="-1">System.Convert 類 <a class="header-anchor" href="#system-convert-類" aria-label="Permalink to &quot;System.Convert 類&quot;">​</a></h3><ul><li><code>System.Convert</code> 是一個預定義的類，提供了一組預定義的轉換方法。</li><li>這些轉換方法都是靜態方法，因此可以直接調用，而無需創建 <code>Convert</code> 類的對象。</li></ul><h2 id="使用轉換方法" tabindex="-1">使用轉換方法 <a class="header-anchor" href="#使用轉換方法" aria-label="Permalink to &quot;使用轉換方法&quot;">​</a></h2><ol><li><strong>指定轉換方法</strong>：根據目標數據類型選擇相應的轉換方法。 <ul><li>例如，為了將值轉換為 <code>int</code>，使用 <code>System.Convert.ToInt32</code>。</li><li>為了將值轉換為 <code>double</code>，使用 <code>System.Convert.ToDouble</code>。</li></ul></li></ol><h3 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h3><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> intValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> stringValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.Convert.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(intValue); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 將 int 轉換為 string</span></span></code></pre></div><ul><li>在這個例子中，<code>intValue</code> 的值為 <code>1000</code>，轉換後的 <code>stringValue</code> 將是 <code>&quot;1000&quot;</code>。</li></ul><h3 id="轉換方法列表" tabindex="-1">轉換方法列表 <a class="header-anchor" href="#轉換方法列表" aria-label="Permalink to &quot;轉換方法列表&quot;">​</a></h3><ul><li><code>ToSByte</code>：將值轉換為 <code>sbyte</code>。</li><li><code>ToByte</code>：將值轉換為 <code>byte</code>。</li><li><code>ToInt32</code>：將值轉換為 <code>int</code>。</li><li><code>ToInt64</code>：將值轉換為 <code>long</code>。</li><li><code>ToSingle</code>：將值轉換為 <code>float</code>。</li><li><code>ToDouble</code>：將值轉換為 <code>double</code>。</li><li><code>ToDecimal</code>：將值轉換為 <code>decimal</code>。</li><li><code>ToString</code>：將值轉換為 <code>string</code>。</li><li><code>ToBoolean</code>：將值轉換為 <code>bool</code>。</li></ul><h3 id="異常處理" tabindex="-1">異常處理 <a class="header-anchor" href="#異常處理" aria-label="Permalink to &quot;異常處理&quot;">​</a></h3><ul><li>如果無法將值轉換為目標數據類型，則會引發 <code>Exception</code>。</li><li>這意味著如果源值無效，應用程序將突然終止並引發異常。</li></ul><h2 id="實際應用" tabindex="-1">實際應用 <a class="header-anchor" href="#實際應用" aria-label="Permalink to &quot;實際應用&quot;">​</a></h2><ul><li>使用轉換方法時，您不需要在調用方法時提及源值的類型，因為這些方法可以接受任何類型的源值。</li><li>例如，將 <code>int</code> 轉換為 <code>string</code> 時，使用 <code>ToString</code> 方法：</li></ul><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> System.Convert.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ToString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(number); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 將 int 轉換為 string</span></span></code></pre></div><ul><li>當顯示 <code>number</code> 的值時，將顯示為 <code>1000</code>（<code>int</code> 類型），而 <code>result</code> 的值將顯示為 <code>&quot;1000&quot;</code>（<code>string</code> 類型）。</li></ul><h2 id="結論" tabindex="-1">結論 <a class="header-anchor" href="#結論" aria-label="Permalink to &quot;結論&quot;">​</a></h2><p>通過使用 <code>System.Convert</code> 類中的轉換方法，您可以將任何原始類型轉換為任何其他原始類型，並且可以輕鬆地在字符串和原始類型之間進行轉換。這些方法提供了一種簡單而有效的方式來處理數據類型的轉換。</p>`,20)]))}const u=i(t,[["render",l]]);export{k as __pageData,u as default};
