import{_ as i,c as a,o as e,ae as t}from"./chunks/framework.TiKqN8Et.js";const o=JSON.parse('{"title":"C# 中的自動實現屬性","description":"","frontmatter":{},"headers":[],"relativePath":"CSharp/properties/auto-properties-with-accessor-accessibility.md","filePath":"CSharp/properties/auto-properties-with-accessor-accessibility.md"}'),h={name:"CSharp/properties/auto-properties-with-accessor-accessibility.md"};function n(l,s,p,k,r,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="c-中的自動實現屬性" tabindex="-1">C# 中的自動實現屬性 <a class="header-anchor" href="#c-中的自動實現屬性" aria-label="Permalink to &quot;C# 中的自動實現屬性&quot;">​</a></h1><h2 id="自動實現屬性的定義" tabindex="-1">自動實現屬性的定義 <a class="header-anchor" href="#自動實現屬性的定義" aria-label="Permalink to &quot;自動實現屬性的定義&quot;">​</a></h2><p>自動實現屬性（Auto-Implemented Properties）是 C# 3.0 中引入的一項新特性。這種屬性包含 <code>get</code> 和 <code>set</code> 訪問器，但不需要顯式定義這些訪問器的實際代碼。相反，您只需使用分號來表示。</p><h3 id="自動實現屬性的特點" tabindex="-1">自動實現屬性的特點 <a class="header-anchor" href="#自動實現屬性的特點" aria-label="Permalink to &quot;自動實現屬性的特點&quot;">​</a></h3><ul><li><strong>簡化語法</strong>：自動實現屬性使代碼更簡潔，開發者不需要手動創建私有字段，編譯器會自動生成。</li><li><strong>隱式字段</strong>：編譯器會自動創建一個私有字段，名稱為 <code>_PropertyName</code>，例如，如果屬性名稱為 <code>NativePlace</code>，則會自動創建 <code>_nativePlace</code> 字段。</li></ul><h3 id="使用自動實現屬性的示例" tabindex="-1">使用自動實現屬性的示例 <a class="header-anchor" href="#使用自動實現屬性的示例" aria-label="Permalink to &quot;使用自動實現屬性的示例&quot;">​</a></h3><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Employee</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NativePlace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自動實現屬性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="訪問修飾符" tabindex="-1">訪問修飾符 <a class="header-anchor" href="#訪問修飾符" aria-label="Permalink to &quot;訪問修飾符&quot;">​</a></h2><p>您可以為 <code>get</code> 和 <code>set</code> 訪問器指定不同的訪問修飾符。<code>set</code> 和 <code>get</code> 的訪問修飾符應該比屬性的訪問修飾符更嚴格。</p><h3 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h3><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Employee</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NativePlace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">internal</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 內部訪問的 set 訪問器</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="只讀自動實現屬性" tabindex="-1">只讀自動實現屬性 <a class="header-anchor" href="#只讀自動實現屬性" aria-label="Permalink to &quot;只讀自動實現屬性&quot;">​</a></h2><p>如果您只需要一個只讀屬性，可以僅定義 <code>get</code> 訪問器，這樣就會創建一個只讀屬性。</p><h3 id="例子-1" tabindex="-1">例子 <a class="header-anchor" href="#例子-1" aria-label="Permalink to &quot;例子&quot;">​</a></h3><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Employee</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NativePlace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 只讀屬性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="在-main-方法中使用自動實現屬性" tabindex="-1">在 Main 方法中使用自動實現屬性 <a class="header-anchor" href="#在-main-方法中使用自動實現屬性" aria-label="Permalink to &quot;在 Main 方法中使用自動實現屬性&quot;">​</a></h2><p>在 <code>Main</code> 方法中，您可以輕鬆地使用自動實現屬性。</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Employee</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    emp.NativePlace </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;New Delhi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 設置屬性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(emp.NativePlace); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 獲取屬性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="總結" tabindex="-1">總結 <a class="header-anchor" href="#總結" aria-label="Permalink to &quot;總結&quot;">​</a></h2><p>自動實現屬性是一種方便的語法，適用於不需要驗證或計算邏輯的屬性。使用自動實現屬性可以簡化代碼，並提高可讀性。在實際項目中，您可以根據需要混合使用自動實現屬性和普通屬性。</p>`,20)]))}const g=i(h,[["render",n]]);export{o as __pageData,g as default};
