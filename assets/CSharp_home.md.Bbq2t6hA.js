import{_ as e,c as t,o as l,ae as r}from"./chunks/framework.TiKqN8Et.js";const p=JSON.parse('{"title":"C# 隨筆","description":"","frontmatter":{},"headers":[],"relativePath":"CSharp/home.md","filePath":"CSharp/home.md"}'),a={name:"CSharp/home.md"};function o(s,i,n,c,h,d){return l(),t("div",null,i[0]||(i[0]=[r('<h1 id="c-隨筆" tabindex="-1">C# 隨筆 <a class="header-anchor" href="#c-隨筆" aria-label="Permalink to &quot;C# 隨筆&quot;">​</a></h1><h2 id="c-方法-methods" tabindex="-1">C# 方法 (Methods) <a class="header-anchor" href="#c-方法-methods" aria-label="Permalink to &quot;C# 方法 (Methods)&quot;">​</a></h2><ul><li>方法基礎 (Method Basics)</li><li>參數 (Arguments)</li><li>參數修飾符 (Parameter Modifiers)</li><li>局部函數 (Local Functions)</li><li>靜態方法 (Static Methods)</li><li>封裝 (Encapsulation)</li><li>this 關鍵字</li><li>方法多載 (Method Overloading)</li><li>遞歸 (Recursion)</li><li>ref return</li><li>引用變量作為參數 (Object Reference as Arguments)</li></ul><h2 id="c-類型轉換-type-conversion" tabindex="-1">C# 類型轉換 (Type Conversion) <a class="header-anchor" href="#c-類型轉換-type-conversion" aria-label="Permalink to &quot;C# 類型轉換 (Type Conversion)&quot;">​</a></h2><ul><li>類型轉換介紹 (What is Type Conversion)</li><li>類型轉換 (Casting - Implicit &amp; Explicit)</li><li>解析方法 (Parse/TryParse)</li><li>轉換方法 (Conversion Methods)</li></ul><h2 id="c-屬性-properties" tabindex="-1">C# 屬性 (Properties) <a class="header-anchor" href="#c-屬性-properties" aria-label="Permalink to &quot;C# 屬性 (Properties)&quot;">​</a></h2><ul><li>創建屬性 (Creating Properties)</li><li>唯讀和唯寫屬性 (Read-only &amp; Write-only)</li><li>自動實現屬性 (Auto-implemented Properties)</li><li>自動屬性與存取器可訪問性 (Auto Properties with Accessor Accessibility)</li></ul><h2 id="c-繼承-inheritance" tabindex="-1">C# 繼承 (Inheritance) <a class="header-anchor" href="#c-繼承-inheritance" aria-label="Permalink to &quot;C# 繼承 (Inheritance)&quot;">​</a></h2><ul><li>繼承基礎 (Inheritance Basics)</li><li>繼承類型 (Types of Inheritance)</li><li>base 關鍵字</li><li>構造函數鏈 (Constructor Chaining)</li><li>方法隱藏 (Method Hiding)</li><li>方法覆寫 (Method Override)</li><li>密封類 (Sealed Class)</li><li>密封方法 (Sealed Method)</li></ul><h2 id="c-構造函數-constructors" tabindex="-1">C# 構造函數 (Constructors) <a class="header-anchor" href="#c-構造函數-constructors" aria-label="Permalink to &quot;C# 構造函數 (Constructors)&quot;">​</a></h2><ul><li>構造函數類型 (Types of Constructors)</li><li>實例構造函數 (Instance Constructors)</li><li>靜態構造函數 (Static Constructors)</li><li>構造函數重載 (Constructor Overloading)</li><li>構造函數初始化器 (Constructor Initializers)</li></ul>',11)]))}const C=e(a,[["render",o]]);export{p as __pageData,C as default};
