import{_ as i,c as a,o as e,ae as n}from"./chunks/framework.TiKqN8Et.js";const E=JSON.parse('{"title":"C# 中的自動實現屬性初始化器","description":"","frontmatter":{},"headers":[],"relativePath":"CSharp/properties/auto-implemented-properties-initializers.md","filePath":"CSharp/properties/auto-implemented-properties-initializers.md"}'),l={name:"CSharp/properties/auto-implemented-properties-initializers.md"};function h(t,s,p,k,r,d){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="c-中的自動實現屬性初始化器" tabindex="-1">C# 中的自動實現屬性初始化器 <a class="header-anchor" href="#c-中的自動實現屬性初始化器" aria-label="Permalink to &quot;C# 中的自動實現屬性初始化器&quot;">​</a></h1><h2 id="自動實現屬性初始化器的定義" tabindex="-1">自動實現屬性初始化器的定義 <a class="header-anchor" href="#自動實現屬性初始化器的定義" aria-label="Permalink to &quot;自動實現屬性初始化器的定義&quot;">​</a></h2><p>自動實現屬性初始化器是 C# 6 中引入的一項新功能。這使得開發者可以在聲明自動實現屬性時直接初始化其值。</p><h3 id="特點" tabindex="-1">特點 <a class="header-anchor" href="#特點" aria-label="Permalink to &quot;特點&quot;">​</a></h3><ul><li>在 C# 6 之前，無法在聲明時為自動屬性賦值。</li><li>在 C# 6 及後續版本中，可以使用 <code>= value</code> 語法來初始化自動屬性。</li></ul><h3 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h3><p>假設我們有一個 <code>Employee</code> 類，並希望初始化 <code>NativePlace</code> 自動屬性。</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Employee</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NativePlace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;New York&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自動實現屬性初始化</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="默認值" tabindex="-1">默認值 <a class="header-anchor" href="#默認值" aria-label="Permalink to &quot;默認值&quot;">​</a></h2><p>如果未顯式初始化自動屬性，則該屬性將根據其數據類型採用默認值：</p><ul><li>數值類型的默認值為 0。</li><li>字符串的默認值為 null。</li></ul><h3 id="覆蓋默認值" tabindex="-1">覆蓋默認值 <a class="header-anchor" href="#覆蓋默認值" aria-label="Permalink to &quot;覆蓋默認值&quot;">​</a></h3><p>您可以在創建對象時覆蓋默認值。例如：</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Employee</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emp1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    emp1.NativePlace </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;New Delhi&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 覆蓋默認值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Employee</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emp2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用默認值 &quot;New York&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    Employee</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emp3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用默認值 &quot;New York&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(emp1.NativePlace); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 輸出: New Delhi</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(emp2.NativePlace); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 輸出: New York</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(emp3.NativePlace); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 輸出: New York</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="總結" tabindex="-1">總結 <a class="header-anchor" href="#總結" aria-label="Permalink to &quot;總結&quot;">​</a></h2><p>自動實現屬性初始化器提供了一種簡便的方法來初始化屬性，特別是在不需要驗證或計算邏輯的情況下。這使得代碼更簡潔，並提高了可讀性。在實際項目中，您可以根據需要使用自動實現屬性和普通屬性之間的組合。</p>`,16)]))}const c=i(l,[["render",h]]);export{E as __pageData,c as default};
