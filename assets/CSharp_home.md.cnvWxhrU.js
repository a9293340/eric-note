import{_ as a,c as i,o as l,ae as r}from"./chunks/framework.TiKqN8Et.js";const _=JSON.parse('{"title":"C# 隨筆","description":"","frontmatter":{},"headers":[],"relativePath":"CSharp/home.md","filePath":"CSharp/home.md"}'),t={name:"CSharp/home.md"};function o(n,e,s,h,c,d){return l(),i("div",null,e[0]||(e[0]=[r('<h1 id="c-隨筆" tabindex="-1">C# 隨筆 <a class="header-anchor" href="#c-隨筆" aria-label="Permalink to &quot;C# 隨筆&quot;">​</a></h1><h2 id="c-方法介紹" tabindex="-1">C# 方法介紹 <a class="header-anchor" href="#c-方法介紹" aria-label="Permalink to &quot;C# 方法介紹&quot;">​</a></h2><h3 id="筆記包含" tabindex="-1">筆記包含 <a class="header-anchor" href="#筆記包含" aria-label="Permalink to &quot;筆記包含&quot;">​</a></h3><ul><li>方法基礎</li><li>參數</li><li>參數修飾</li><li>局部函數</li><li>靜態方法</li><li>封裝</li><li>this</li><li>方法多載</li><li>遞歸</li><li>ref return</li><li>將引用變量作為參數傳遞</li></ul><h2 id="c-type-conversion" tabindex="-1">C# Type Conversion <a class="header-anchor" href="#c-type-conversion" aria-label="Permalink to &quot;C# Type Conversion&quot;">​</a></h2><ul><li>What is Type Conversion</li><li>Casting(Implicit &amp; Explicit)</li><li>Parse(parse/tryParse)</li><li>Conversion Methods</li></ul>',6)]))}const m=a(t,[["render",o]]);export{_ as __pageData,m as default};
