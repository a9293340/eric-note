import{_ as i,c as a,o as n,ae as l}from"./chunks/framework.TiKqN8Et.js";const g=JSON.parse('{"title":"C# 中的密封類 (Sealed Class)","description":"","frontmatter":{},"headers":[],"relativePath":"CSharp/Inheritance/sealed-class.md","filePath":"CSharp/Inheritance/sealed-class.md"}'),t={name:"CSharp/Inheritance/sealed-class.md"};function h(p,s,k,e,d,r){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="c-中的密封類-sealed-class" tabindex="-1">C# 中的密封類 (Sealed Class) <a class="header-anchor" href="#c-中的密封類-sealed-class" aria-label="Permalink to &quot;C# 中的密封類 (Sealed Class)&quot;">​</a></h1><p>密封類是 C# 中的一種特殊類型，它被設計為不能被繼承。通過使用 <code>sealed</code> 修飾符，開發者可以防止其他開發者創建基於該類的子類，提供了一種安全機制來保護類的實現不被擴展或修改。</p><h2 id="密封類的基本概念" tabindex="-1">密封類的基本概念 <a class="header-anchor" href="#密封類的基本概念" aria-label="Permalink to &quot;密封類的基本概念&quot;">​</a></h2><p>密封類的主要特點：</p><ol><li><strong>不能被繼承</strong>：其他類不能繼承密封類</li><li><strong>可以繼承其他類</strong>：密封類本身可以是其他類的子類</li><li><strong>可以實現接口</strong>：密封類可以實現一個或多個接口</li><li><strong>可以被實例化</strong>：與普通類一樣，密封類可以創建對象實例</li></ol><h2 id="密封類的語法" tabindex="-1">密封類的語法 <a class="header-anchor" href="#密封類的語法" aria-label="Permalink to &quot;密封類的語法&quot;">​</a></h2><p>使用 <code>sealed</code> 關鍵字來聲明密封類：</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 基本密封類</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SealedClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 類成員...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 繼承其他類的密封類</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DerivedSealedClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BaseClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 類成員...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 實現接口的密封類</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SealedWithInterface</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">IMyInterface</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 實現接口成員...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="密封類的成員限制" tabindex="-1">密封類的成員限制 <a class="header-anchor" href="#密封類的成員限制" aria-label="Permalink to &quot;密封類的成員限制&quot;">​</a></h2><p>密封類可以包含：</p><ul><li>字段（Fields）</li><li>屬性（Properties）</li><li>方法（Methods）</li><li>事件（Events）</li><li>構造函數（Constructors）</li><li>靜態成員（Static members）</li><li>常量（Constants）</li><li>索引器（Indexers）</li><li>運算符（Operators）</li></ul><p>密封類<strong>不適合</strong>包含：</p><ul><li>虛方法（Virtual methods）：因為密封類不能被繼承，所以虛方法沒有意義</li><li>抽象成員（Abstract members）：抽象成員需要在子類中實現，而密封類不能有子類</li></ul><h2 id="密封類的實際示例" tabindex="-1">密封類的實際示例 <a class="header-anchor" href="#密封類的實際示例" aria-label="Permalink to &quot;密封類的實際示例&quot;">​</a></h2><p>以下是一個基本的密封類示例：</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 普通基類</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Employee</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> virtual</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DisplayDetails</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Employee ID: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Id</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}, Name: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 密封的子類</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> sealed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Manager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Employee</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> string</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Department</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> override</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DisplayDetails</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        base</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DisplayDetails</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Department: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Department</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ApproveLeave</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Leave approved by manager&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 以下代碼會導致編譯錯誤</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 因為不能從密封類繼承</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">public class BranchManager : Manager  // 錯誤！</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    public string BranchName { get; set; }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用密封類</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 創建密封類的對象（正常操作）</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Manager</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> manager</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Manager</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 101</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;John Smith&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            Department </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Finance&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DisplayDetails</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        manager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ApproveLeave</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="為什麼使用密封類" tabindex="-1">為什麼使用密封類？ <a class="header-anchor" href="#為什麼使用密封類" aria-label="Permalink to &quot;為什麼使用密封類？&quot;">​</a></h2><p>密封類的主要使用場景：</p><ol><li><strong>防止繼承</strong>：當類的設計不適合被繼承或擴展時</li><li><strong>安全考慮</strong>：防止其他開發者通過繼承來修改或繞過類的行為</li><li><strong>確保行為一致性</strong>：保證類的行為不會被子類改變</li><li><strong>優化性能</strong>：編譯器可以對密封類進行一些優化，因為它知道不會有虛方法調用</li></ol><h2 id="密封類與普通類的比較" tabindex="-1">密封類與普通類的比較 <a class="header-anchor" href="#密封類與普通類的比較" aria-label="Permalink to &quot;密封類與普通類的比較&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>密封類</th><th>普通類</th></tr></thead><tbody><tr><td>可以實例化</td><td>是</td><td>是</td></tr><tr><td>可以繼承它</td><td>否</td><td>是</td></tr><tr><td>可以繼承自其他類</td><td>是</td><td>是</td></tr><tr><td>可以實現接口</td><td>是</td><td>是</td></tr><tr><td>可以包含虛方法</td><td>不推薦（無意義）</td><td>是</td></tr><tr><td>可以包含抽象成員</td><td>否</td><td>否（僅抽象類可以）</td></tr></tbody></table><h2 id="密封類與其他類型的比較" tabindex="-1">密封類與其他類型的比較 <a class="header-anchor" href="#密封類與其他類型的比較" aria-label="Permalink to &quot;密封類與其他類型的比較&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>密封類</th><th>抽象類</th><th>靜態類</th></tr></thead><tbody><tr><td>可以實例化</td><td>是</td><td>否</td><td>否</td></tr><tr><td>可以被繼承</td><td>否</td><td>是</td><td>否</td></tr><tr><td>可以包含非靜態成員</td><td>是</td><td>是</td><td>否</td></tr><tr><td>可以包含靜態成員</td><td>是</td><td>是</td><td>是</td></tr><tr><td>可以包含虛方法</td><td>不推薦</td><td>是</td><td>否</td></tr><tr><td>可以包含抽象成員</td><td>否</td><td>是</td><td>否</td></tr></tbody></table><h2 id="最佳實踐" tabindex="-1">最佳實踐 <a class="header-anchor" href="#最佳實踐" aria-label="Permalink to &quot;最佳實踐&quot;">​</a></h2><ol><li><strong>謹慎使用密封類</strong>：只在確實需要防止繼承時使用密封類</li><li><strong>記錄原因</strong>：在使用密封類時，記錄為什麼該類需要是密封的</li><li><strong>考慮替代方案</strong>：在某些情況下，使用私有構造函數和靜態成員可能是更好的選擇</li><li><strong>考慮可擴展性</strong>：密封類可能會限制未來的擴展性需求</li></ol><h2 id="總結" tabindex="-1">總結 <a class="header-anchor" href="#總結" aria-label="Permalink to &quot;總結&quot;">​</a></h2><p>密封類是 C# 中提供的一種機制，用於防止類被繼承。雖然它們在功能上與普通類非常相似，但它們增加了一個重要的限制：不能從這些類派生子類。這在某些情況下可能很有用，尤其是當你想要確保類的行為不被修改或擴展時。但是，應該謹慎使用密封類，因為它們可能會限制代碼的未來擴展性。</p>`,27)]))}const y=i(t,[["render",h]]);export{g as __pageData,y as default};
