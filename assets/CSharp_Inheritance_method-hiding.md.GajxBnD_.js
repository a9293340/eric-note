import{_ as i,c as a,o as n,ae as l}from"./chunks/framework.TiKqN8Et.js";const g=JSON.parse('{"title":"C# 中的方法隱藏 (Method Hiding)","description":"","frontmatter":{},"headers":[],"relativePath":"CSharp/Inheritance/method-hiding.md","filePath":"CSharp/Inheritance/method-hiding.md"}'),h={name:"CSharp/Inheritance/method-hiding.md"};function p(t,s,e,k,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="c-中的方法隱藏-method-hiding" tabindex="-1">C# 中的方法隱藏 (Method Hiding) <a class="header-anchor" href="#c-中的方法隱藏-method-hiding" aria-label="Permalink to &quot;C# 中的方法隱藏 (Method Hiding)&quot;">​</a></h1><p>方法隱藏是 C# 繼承中的一個重要概念，它允許子類通過創建同名方法來「隱藏」父類的方法實現。這種機制與方法重寫 (Override) 不同，提供了另一種自定義繼承行為的方式。</p><h2 id="方法隱藏的定義" tabindex="-1">方法隱藏的定義 <a class="header-anchor" href="#方法隱藏的定義" aria-label="Permalink to &quot;方法隱藏的定義&quot;">​</a></h2><p>方法隱藏是指子類創建一個與父類方法<strong>完全相同簽名</strong>的方法（相同名稱、相同返回類型、相同參數類型和數量），從而「隱藏」父類的原始實現。</p><p>當通過子類對象調用該方法時，只會執行子類的方法版本，父類的方法版本不會被執行。</p><h2 id="方法隱藏與方法重寫的區別" tabindex="-1">方法隱藏與方法重寫的區別 <a class="header-anchor" href="#方法隱藏與方法重寫的區別" aria-label="Permalink to &quot;方法隱藏與方法重寫的區別&quot;">​</a></h2><table tabindex="0"><thead><tr><th>特性</th><th>方法隱藏 (Hiding)</th><th>方法重寫 (Override)</th></tr></thead><tbody><tr><td>關鍵字</td><td><code>new</code> (可選但推薦)</td><td><code>override</code> (必須)</td></tr><tr><td>父類方法標記</td><td>不需要特殊標記</td><td>必須使用 <code>virtual</code> 標記</td></tr><tr><td>執行時行為</td><td>基於引用類型決定調用哪個方法</td><td>基於對象的實際類型決定</td></tr><tr><td>設計意圖</td><td>完全替換父類方法的實現</td><td>擴展或修改父類方法的行為</td></tr></tbody></table><h2 id="方法隱藏的語法" tabindex="-1">方法隱藏的語法 <a class="header-anchor" href="#方法隱藏的語法" aria-label="Permalink to &quot;方法隱藏的語法&quot;">​</a></h2><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 父類</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Parent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Parent&#39;s method&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子類</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Parent</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 使用 new 關鍵字進行方法隱藏</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Display</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Child&#39;s method&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="new-關鍵字的作用" tabindex="-1">new 關鍵字的作用 <a class="header-anchor" href="#new-關鍵字的作用" aria-label="Permalink to &quot;new 關鍵字的作用&quot;">​</a></h2><p>雖然 <code>new</code> 關鍵字在方法隱藏中是可選的，但強烈建議使用它：</p><ol><li><strong>明確意圖</strong>：向其他開發者清楚表明你有意隱藏父類方法</li><li><strong>抑制警告</strong>：避免編譯器產生「子類方法隱藏父類方法」的警告</li><li><strong>提高代碼可讀性</strong>：清晰表明這是一個設計決定，而不是偶然的命名衝突</li></ol><h2 id="實際範例" tabindex="-1">實際範例 <a class="header-anchor" href="#實際範例" aria-label="Permalink to &quot;實際範例&quot;">​</a></h2><p>以下是一個完整的方法隱藏示例：</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 父類</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Employee</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 父類方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetHealthInsuranceAmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 所有員工的基礎健康保險金額</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 500</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 子類</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Manager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Employee</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 子類中隱藏父類方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GetHealthInsuranceAmount</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 經理擁有更高的健康保險金額</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 另一個子類，沒有隱藏父類方法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SalesMan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> : </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Employee</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 沒有重新定義 GetHealthInsuranceAmount 方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 因此會使用父類的方法實現</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Program</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 創建父類對象</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Employee</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> emp</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Employee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 輸出 500，使用父類的方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Employee insurance: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">emp</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetHealthInsuranceAmount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 創建 Manager 子類對象</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Manager</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mgr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Manager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 輸出 1000，使用子類的隱藏方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Manager insurance: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mgr</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetHealthInsuranceAmount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 創建 SalesMan 子類對象</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        SalesMan</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sm</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SalesMan</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 輸出 500，使用父類的方法（因為子類沒有隱藏它）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;SalesMan insurance: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">sm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetHealthInsuranceAmount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 使用父類引用指向子類對象</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Employee</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> empRef</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Manager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // 輸出 500，使用父類的方法（因為是父類引用）</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">$&quot;Manager as Employee insurance: {</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">empRef</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetHealthInsuranceAmount</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">()}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>輸出結果：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Employee insurance: 500</span></span>
<span class="line"><span>Manager insurance: 1000</span></span>
<span class="line"><span>SalesMan insurance: 500</span></span>
<span class="line"><span>Manager as Employee insurance: 500</span></span></code></pre></div><h2 id="方法隱藏的行為說明" tabindex="-1">方法隱藏的行為說明 <a class="header-anchor" href="#方法隱藏的行為說明" aria-label="Permalink to &quot;方法隱藏的行為說明&quot;">​</a></h2><p>從上面的示例可以看出：</p><ol><li>當使用父類對象 (<code>Employee emp</code>) 調用方法時，執行父類版本的方法</li><li>當使用隱藏了方法的子類對象 (<code>Manager mgr</code>) 調用方法時，執行子類版本的方法</li><li>當使用未隱藏方法的子類對象 (<code>SalesMan sm</code>) 調用方法時，由於該子類沒有自己的實現，所以執行父類版本的方法</li><li>當使用父類引用指向子類對象 (<code>Employee empRef = new Manager()</code>) 調用方法時，執行的是父類版本的方法，<strong>這是方法隱藏與方法重寫的關鍵區別</strong></li></ol><h2 id="方法隱藏的使用場景" tabindex="-1">方法隱藏的使用場景 <a class="header-anchor" href="#方法隱藏的使用場景" aria-label="Permalink to &quot;方法隱藏的使用場景&quot;">​</a></h2><p>以下情況適合使用方法隱藏：</p><ol><li><strong>完全替換行為</strong>：當子類需要完全替換父類的方法實現，而不是擴展它時</li><li><strong>無法修改父類</strong>：當你無法修改父類（例如，它來自第三方庫）但需要在子類中提供不同的實現</li><li><strong>特定子類行為</strong>：當特定子類需要完全不同的實現，而其他子類可能仍使用父類的實現時</li></ol><h2 id="最佳實踐" tabindex="-1">最佳實踐 <a class="header-anchor" href="#最佳實踐" aria-label="Permalink to &quot;最佳實踐&quot;">​</a></h2><ol><li><strong>總是使用 <code>new</code> 關鍵字</strong>：即使它是可選的，也應該始終使用它來明確表示意圖</li><li><strong>謹慎使用方法隱藏</strong>：方法隱藏可能導致多態性行為出乎意料，應謹慎使用</li><li><strong>考慮替代方案</strong>：在許多情況下，方法重寫（override）是更好的選擇，因為它保留了多態性</li><li><strong>文檔說明</strong>：在文檔中清晰說明為何選擇方法隱藏而非重寫</li></ol><h2 id="總結" tabindex="-1">總結 <a class="header-anchor" href="#總結" aria-label="Permalink to &quot;總結&quot;">​</a></h2><p>方法隱藏是 C# 中允許子類完全替換父類方法實現的機制。雖然它在某些特定場景中很有用，但應謹慎使用，因為它會改變預期的多態行為。在大多數需要修改父類方法行為的情況下，方法重寫（使用 <code>virtual</code> 和 <code>override</code> 關鍵字）通常是更好的選擇。</p>`,27)]))}const o=i(h,[["render",p]]);export{g as __pageData,o as default};
