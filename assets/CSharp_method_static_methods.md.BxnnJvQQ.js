import{_ as i,c as s,o as l,ae as t}from"./chunks/framework.Cwl8K4e2.js";const u=JSON.parse('{"title":"C# 中的靜態方法","description":"","frontmatter":{},"headers":[],"relativePath":"CSharp/method/static_methods.md","filePath":"CSharp/method/static_methods.md"}'),e={name:"CSharp/method/static_methods.md"};function n(o,a,r,c,h,p){return l(),s("div",null,a[0]||(a[0]=[t(`<h1 id="c-中的靜態方法" tabindex="-1">C# 中的靜態方法 <a class="header-anchor" href="#c-中的靜態方法" aria-label="Permalink to &quot;C# 中的靜態方法&quot;">​</a></h1><h2 id="靜態方法的定義" tabindex="-1">靜態方法的定義 <a class="header-anchor" href="#靜態方法的定義" aria-label="Permalink to &quot;靜態方法的定義&quot;">​</a></h2><ul><li>靜態方法是使用 <code>static</code> 修飾符聲明的方法。</li><li>與實例方法不同，靜態方法不依賴於任何特定的對象實例。</li></ul><h2 id="靜態方法與實例方法的區別" tabindex="-1">靜態方法與實例方法的區別 <a class="header-anchor" href="#靜態方法與實例方法的區別" aria-label="Permalink to &quot;靜態方法與實例方法的區別&quot;">​</a></h2><ul><li><p><strong>實例方法</strong>：</p><ul><li>不使用 <code>static</code> 修飾符。</li><li>需要通過對象來調用，並且與對象的實例相關聯。</li><li>可以訪問實例字段和靜態字段。</li></ul></li><li><p><strong>靜態方法</strong>：</p><ul><li>使用 <code>static</code> 修飾符。</li><li>可以直接通過類名調用，無需創建對象。</li><li>只能訪問靜態字段，無法訪問實例字段。</li></ul></li></ul><h3 id="例子" tabindex="-1">例子 <a class="header-anchor" href="#例子" aria-label="Permalink to &quot;例子&quot;">​</a></h3><div class="language-csharp:C#/static_example.md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp:C#/static_example.md</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>public class Product {</span></span>
<span class="line"><span>    private static int totalNoOfProducts; // 靜態字段</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static void SetTotalNoOfProducts(int value) {</span></span>
<span class="line"><span>        totalNoOfProducts = value; // 設置靜態字段的值</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    public static int GetTotalNoOfProducts() {</span></span>
<span class="line"><span>        return totalNoOfProducts; // 獲取靜態字段的值</span></span>
<span class="line"><span>    }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="使用靜態方法的情境" tabindex="-1">使用靜態方法的情境 <a class="header-anchor" href="#使用靜態方法的情境" aria-label="Permalink to &quot;使用靜態方法的情境&quot;">​</a></h2><ul><li>當需要操作靜態字段時，應使用靜態方法。</li><li>例如，對於 <code>totalNoOfProducts</code> 靜態字段，可以創建 <code>SetTotalNoOfProducts</code> 和 <code>GetTotalNoOfProducts</code> 方法來設置和獲取其值。</li></ul><h2 id="靜態方法的特性" tabindex="-1">靜態方法的特性 <a class="header-anchor" href="#靜態方法的特性" aria-label="Permalink to &quot;靜態方法的特性&quot;">​</a></h2><ul><li>靜態方法不需要對象實例即可調用，這使得它們在某些情況下更方便。</li><li>靜態方法可以在類的上下文中被調用，而不需要創建對象。</li></ul><h2 id="靜態方法的限制" tabindex="-1">靜態方法的限制 <a class="header-anchor" href="#靜態方法的限制" aria-label="Permalink to &quot;靜態方法的限制&quot;">​</a></h2><ul><li>靜態方法無法使用 <code>this</code> 關鍵字，因為靜態方法沒有當前對象的概念。</li><li>靜態方法不能直接訪問實例字段或實例方法，但可以通過創建對象來訪問。</li></ul><h2 id="靜態方法的應用" tabindex="-1">靜態方法的應用 <a class="header-anchor" href="#靜態方法的應用" aria-label="Permalink to &quot;靜態方法的應用&quot;">​</a></h2><ul><li>在 <code>Main</code> 方法中，可以調用靜態方法來設置和獲取靜態字段的值。</li><li>例如：</li></ul><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Product.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetTotalNoOfProducts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 設置靜態字段</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> total</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Product.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetTotalNoOfProducts</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 獲取靜態字段</span></span></code></pre></div><h2 id="總結" tabindex="-1">總結 <a class="header-anchor" href="#總結" aria-label="Permalink to &quot;總結&quot;">​</a></h2><ul><li>靜態方法是與類相關聯的方法，主要用於操作靜態字段。</li><li>它們不依賴於對象實例，並且可以通過類名直接調用。</li></ul><h2 id="靜態方法與實例方法的關係" tabindex="-1">靜態方法與實例方法的關係 <a class="header-anchor" href="#靜態方法與實例方法的關係" aria-label="Permalink to &quot;靜態方法與實例方法的關係&quot;">​</a></h2><ul><li>實例方法可以調用靜態方法，但靜態方法不能直接調用實例方法。</li><li>在靜態方法中，可以創建對象來訪問實例方法。</li></ul><h2 id="c-與-javascript-中的靜態方法" tabindex="-1">C# 與 JavaScript 中的靜態方法 <a class="header-anchor" href="#c-與-javascript-中的靜態方法" aria-label="Permalink to &quot;C# 與 JavaScript 中的靜態方法&quot;">​</a></h2><h3 id="c-中的靜態方法-1" tabindex="-1">C# 中的靜態方法 <a class="header-anchor" href="#c-中的靜態方法-1" aria-label="Permalink to &quot;C# 中的靜態方法&quot;">​</a></h3><ul><li>靜態方法使用 <code>static</code> 修飾符聲明，並且與類相關聯。</li><li>靜態方法可以直接通過類名調用，無需創建對象。</li></ul><h3 id="javascript-中的靜態方法" tabindex="-1">JavaScript 中的靜態方法 <a class="header-anchor" href="#javascript-中的靜態方法" aria-label="Permalink to &quot;JavaScript 中的靜態方法&quot;">​</a></h3><ul><li>在 JavaScript 中，靜態方法通常是定義在類中的方法，使用 <code>static</code> 關鍵字。</li><li>靜態方法也可以直接通過類名調用，無需創建對象。</li></ul><h3 id="總結-1" tabindex="-1">總結 <a class="header-anchor" href="#總結-1" aria-label="Permalink to &quot;總結&quot;">​</a></h3><ul><li>C# 和 JavaScript 中的靜態方法概念相似，都是與類相關聯的方法，並且可以直接通過類名調用。</li></ul>`,27)]))}const k=i(e,[["render",n]]);export{u as __pageData,k as default};
