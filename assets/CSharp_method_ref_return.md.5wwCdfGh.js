import{_ as i,c as a,o as n,ae as e}from"./chunks/framework.TiKqN8Et.js";const o=JSON.parse('{"title":"C# 中的 ref returns","description":"","frontmatter":{},"headers":[],"relativePath":"CSharp/method/ref_return.md","filePath":"CSharp/method/ref_return.md"}'),l={name:"CSharp/method/ref_return.md"};function h(t,s,r,p,k,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="c-中的-ref-returns" tabindex="-1">C# 中的 ref returns <a class="header-anchor" href="#c-中的-ref-returns" aria-label="Permalink to &quot;C# 中的 ref returns&quot;">​</a></h1><h2 id="什麼是-ref-returns" tabindex="-1">什麼是 ref returns <a class="header-anchor" href="#什麼是-ref-returns" aria-label="Permalink to &quot;什麼是 ref returns&quot;">​</a></h2><ul><li><code>ref returns</code> 是 C# 7 中引入的一個特性，允許方法返回變量的引用。</li><li>當你返回一個變量作為引用時，返回變量的引用將返回給調用部分。</li></ul><h2 id="工作原理" tabindex="-1">工作原理 <a class="header-anchor" href="#工作原理" aria-label="Permalink to &quot;工作原理&quot;">​</a></h2><ul><li>返回值的引用將被分配到接收返回值的調用部分。</li><li>將來，如果對返回變量值進行任何更改，接收變量也會自動進行更改。</li></ul><h3 id="例子-學生類" tabindex="-1">例子：學生類 <a class="header-anchor" href="#例子-學生類" aria-label="Permalink to &quot;例子：學生類&quot;">​</a></h3><p>假設有一個名為 <code>Student</code> 的類，包含一個公共字段 <code>grade</code>。</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> grade</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 初始化等級值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PrintGrade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        Console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WriteLine</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(grade); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印當前等級</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DoWork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> grade; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 grade 字段的引用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="主程序" tabindex="-1">主程序 <a class="header-anchor" href="#主程序" aria-label="Permalink to &quot;主程序&quot;">​</a></h3><p>在 <code>Main</code> 方法中，創建 <code>Student</code> 類的對象並調用方法。</p><div class="language-csharp vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">csharp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Program</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        Student</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PrintGrade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 輸出：2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        ref</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">DoWork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 獲取 grade 的引用</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        g </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 更新引用的值</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        s.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PrintGrade</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 輸出：5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="使用-ref-returns-的好處" tabindex="-1">使用 ref returns 的好處 <a class="header-anchor" href="#使用-ref-returns-的好處" aria-label="Permalink to &quot;使用 ref returns 的好處&quot;">​</a></h2><ul><li>當你更新 <code>ref return</code> 的值時，原始變量的值會自動更新。</li><li>這使得在需要返回字段的引用而不是其值的情況下非常有用。</li></ul><h2 id="實際應用" tabindex="-1">實際應用 <a class="header-anchor" href="#實際應用" aria-label="Permalink to &quot;實際應用&quot;">​</a></h2><ul><li>在實際項目中，當你想返回一個字段的引用而不是它的值時，可以使用 <code>ref returns</code>。</li><li>例如，在 <code>Employee</code> 類中，如果你將 <code>salary</code> 字段的引用作為 <code>ref return</code> 返回，則可以通過更新 <code>ref return</code> 變量來間接更新 <code>salary</code> 字段的值。</li></ul><h2 id="結論" tabindex="-1">結論 <a class="header-anchor" href="#結論" aria-label="Permalink to &quot;結論&quot;">​</a></h2><ul><li><code>ref returns</code> 提供了一種靈活的方式來操作對象的字段，允許直接通過引用進行修改。</li><li>這在需要高效地管理對象狀態的情況下非常有用。</li></ul>`,17)]))}const E=i(l,[["render",h]]);export{o as __pageData,E as default};
